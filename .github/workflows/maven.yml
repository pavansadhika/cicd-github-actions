# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Github-Actions-Pipeline
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  IMAGE_NAME: pavan9999/github-actions
  IMAGE_TAG: moonpage
  AWS_REGION: us-east-1
  ECS_CLUSTER: ECS-Cluster
  ECS_SERVICE: github-svc
  ECS_TASK_DEFINITION: github-task
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v2
     - name: Set up JDK 1.8
       uses: actions/setup-java@v1
       with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
     - name: Build with Maven
       run: mvn clean install
     - name: Upload Artifacts
       uses: actions/upload-artifact@v2
       with: 
          name: welcome-artifacts
          path: ./target/*.jar
     - name: SonarQube Scan Stage
       uses: sonarsource/sonarqube-scan-action@master
       env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
     - name: SonarQube Quality Gate check
       uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
       timeout-minutes: 5
       env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #Dependency-Check(Security Composition Analysis)
     - name: Run dependency check
       run: mvn org.owasp:dependency-check-maven:check
     - name: Upload results
       uses: actions/upload-artifact@v2
       with:
          name: dependency-check-report
          path: ./target/dependency-check-report.html   
     - name: Docker-Image-Build & Push
       uses: mr-smithers-excellent/docker-build-push@v5
       with:
          image: ${IMAGE_NAME}
          tags: ${IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      #Docker Image Scanning
     - name: Install Trivy 
       run: |
         sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
     - name: Scan Docker Image
       run: |
          trivy image ${IMAGE_NAME}:${IMAGE_TAG}   
     - name: Upload scan results
       uses: actions/upload-artifact@v2
       with:
          name: trivy-scan-results
          path: ./target/trivy/*
  deploy:
    env:
      AWS_REGION: us-east-1
      ECS_CLUSTER: ECS-Cluster
      ECS_SERVICE: github-svc
      ECS_TASK_DEFINITION: github-task
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{env.ECS_SERVICE}} --task-definition ${{ env.ECS_TASK_DEFINITION }}
  junit-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build and Test
      run: mvn test

    - name: Upload JUnit Test Results
      uses: actions/upload-artifact@v2
      with:
        name: junit-results
        path: ./target/junitreports/
    - name: Publish JUnit Test Report
      run: echo "JUnit test results uploaded successfully."
  jmeter-test:
    needs: junit-test
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v2
     - name: Setup Java
       uses: actions/setup-java@v1
       with:
          java-version: 11
     - name: Download and extract JMeter
       run: |
         curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.5.zip -o jmeter.zip
         unzip jmeter.zip

     - name: Run JMeter test
       run: |
         ./apache-jmeter-5.5/bin/jmeter -n -t test.jmx -l jmeter-test-result.jtl

     - name: Upload test results    
       uses: actions/upload-artifact@v2
       with:
          name: jmeter-test-result
          path: /home/runner/work/cicd-github-actions/cicd-github-actions/*

 
          
          
          
